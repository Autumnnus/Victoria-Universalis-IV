template hud_elements_alpha {
	alpha = 1
}

# Note: We are using a slightly modified version of this in outliner_framework:11, update that one as well if this one gets changed
template hud_visibility {
	visible = "[And( IsInGame, And( Not( IsPauseMenuShown ), Not( IsGameOverScreenShown )))]"
}

@secondary_icon_size = 26

types topbar_components
{
	### SECONDARY ICONS
	type topbar_secondary_icons = container {
		position = { 130 40 }
		flowcontainer = {
			direction = vertical
			spacing = 1
		
			###VANILLA
			flowcontainer = {
				visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
				layoutpolicy_vertical = expanding
				alwaystransparent = no
				block "animation" {
					position = { 0 0 }
					alpha = 0
					
					state = {
						name = show_topbar_secondary_stats
						alpha = 1
						position_y = 0
						duration = 0.15
						using = Animation_Curve_Default
					}
					state = {
						name = hide_topbar_secondary_stats
						alpha = 0
						position_y = 0
						duration = 0.15
						using = Animation_Curve_Default
					}
				}
				
				background = {
					using = dark_area_rounded
					margin = { 0 -5 }
					margin_left = 5
				}
				
				flowcontainer = {
					name = "tutorial_highlight_gdp"
					minimumsize = { 90 30 }
					maximumsize = { 90 30 }
					spacing = 2
					using = GDP_tooltip_with_graph
					using = tooltip_below

					onmousehierarchyenter = "[SelectMapModeByKey('mm_gdp')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alwaystransparent = no
					
					icon = {
						texture = "gfx/interface/icons/generic_icons/gdp.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetGDP|1*]#!"
						autoresize = yes
						align = left|nobaseline
					}
				}
				
				flowcontainer = {
					minimumsize = { 90 30 }
					maximumsize = { 90 30 }
					spacing = 2
					tooltip = "LITERACY_TOOLTIP"
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_literacy')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alwaystransparent = no
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/literacy.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetIncorporatedLiteracyRate|%1]#!"
						autoresize = yes
						align = left|nobaseline
					}
				}
				flowcontainer = {
					minimumsize = { 90 30 }
					maximumsize = { 90 30 }
					spacing = 2
					using = average_standard_of_living_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_standard_of_living')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alwaystransparent = no
				
					textbox = {
						parentanchor = vcenter
						text = "[LabelingHelper.GetIconForStandardOfLivingCFixedPoint(Country.GetAverageSoLByPopulation)|v]"
						autoresize = yes
						align = left|nobaseline
						fontsize = 21 #hack to get the same size on the text icon as the rest in the top bar
					}

					textbox = {
						parentanchor = vcenter
						text = "[Country.GetFormattedStandardOfLivingAll|v]"
						autoresize = yes
						align = left|nobaseline
						margin_left = 3
					}
				}
				flowcontainer = {
					minimumsize = { 90 30 }
					maximumsize = { 90 30 }
					spacing = 2	
					using = population_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_population')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alwaystransparent = no
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/population.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetTotalPopulation|D]#!"
						autoresize = yes
						align = left|nobaseline
					}
				}
				flowcontainer = {
					minimumsize = { 90 30 }
					maximumsize = { 90 30 }
					spacing = 2	
					using = radicals_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_radicals')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alpha = "[TransparentIfZero_int32(Country.GetNumRadicals)]"
					alwaystransparent = no
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/population_radical.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetNumRadicals|D]#!"
						autoresize = yes
						align = left|nobaseline
					}
				}
				flowcontainer = {
					minimumsize = { 90 30 }
					maximumsize = { 90 30 }
					spacing = 2	
					using = loyalists_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_loyalists')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alpha = "[TransparentIfZero_int32(Country.GetNumLoyalists)]"
					alwaystransparent = no
					icon = {
						texture = "gfx/interface/icons/generic_icons/population_loyalist.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetNumLoyalists|D]#!"
						autoresize = yes
						align = left|nobaseline
					}
				}
				flowcontainer = {
					minimumsize = { 28 28 }
					maximumsize = { 28 28 }
					tooltip = "ve_topbar"
					using = tooltip_below
					button_icon_round_toggle = {
						using = glow_button
						size = { 28 28 }
						blockoverride "on_click" {
							onclick = "[GetScriptedGui('ve_top_bar').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						}
						icon = {
							size = { 25 25 }
							name = inflation_icon
							texture = "gfx/interface/buttons/button_icons/reset.dds"
							position = { 2 2 }
						}
					}
				}
			}
			### EXTRA INFO
			flowcontainer = {
				name = "extra_info"
				layoutpolicy_vertical = expanding
				# using = hide_ve_mod_topbar
				visible = "[GetScriptedGui('ve_top_bar').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

				background = {
					using = dark_area_rounded
					margin = { 0 -5 }
					margin_left = 5
				}
				
				# Prestige
				button = {
					name = "prestige_button"
					size = { 90 28 }
					onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
					
					flowcontainer = {
						name = "prestige"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "COUNTRY_PRESTIGE_BREAKDOWN"
						using = tooltip_below
	
						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = prestige_icon
							texture = "gfx/interface/icons/generic_icons/unused/most_senior_front_commander.dds"
							parentanchor = vcenter
						}
	
						textbox = {
							parentanchor = vcenter
							text = "[Country.GetPrestige|1v]"
							alpha = "[TransparentIfZero_int32(Country.GetPrestige)]"
							autoresize = yes
							align = left|nobaseline
						}
					}
				}
				# Infamy
				button = {
					name = "infamy_button"
					size = { 90 28 }
					onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
					
					flowcontainer = {
						name = "infamy"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "[Country.GetInfamyDesc]"
						using = tooltip_below
	
						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = infamy_icon
							texture = "[Country.GetInfamyIconTexture]"
							parentanchor = vcenter
						}
	
						textbox = {
							parentanchor = vcenter
							text = "[Country.GetInfamy|1v]"
							alpha = "[TransparentIfZero_int32(Country.GetInfamy)]"
							autoresize = yes
							align = left|nobaseline
						}
					}
				}

				# Legitimacy
				button = {
					name = "legitimacy_button"
					size = { 90 28 }
					onclick = "[InformationPanelBar.OpenPanelTab('politics', 'interest_groups')]"

					flowcontainer = {
						name = "legitimacy"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						datacontext = "[Country.GetGovernmentLegitimacyLevel]"
						tooltip = "SULIUS_LEGITIMACY_LEVEL_ACTIVE_TOOLTIP"
						using = tooltip_below
	
						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = legitimacy_icon
							texture = "gfx/interface/icons/generic_icons/legitimacy.dds"
							parentanchor = vcenter
						}
	
						textbox = {
							parentanchor = vcenter
							text = "[Country.GetGovernmentLegitimacy|1v]"
							alpha = "[TransparentIfZero_int32(Country.GetPrestige)]"
							autoresize = yes
							align = left|nobaseline
						}
					}
				}


				# Convoys
				button = {
					name = "convoys_button"
					size = { 90 28 }
					onclick = "[InformationPanelBar.OpenMarketPanelTab(AccessPlayer.AccessFirstMarket, 'trade_routes')]"
					
					flowcontainer = {
						name = "convoys"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "NUM_CONVOYS_TOOLTIP_EXTENDED"
						using = tooltip_below
	
						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = infamy_icon
							texture = "gfx/interface/icons/generic_icons/convoys.dds"
							parentanchor = vcenter
						}
	
						textbox = {
							parentanchor = vcenter
							text = "[AccessPlayer.GetNumAvailableConvoys|1v]" #This is total convoys minus required convoys
							alpha = "[TransparentIfZero_int32(AccessPlayer.GetNumAvailableConvoys)]"
							autoresize = yes
							align = left|nobaseline
						}
					}
				}
				
				# Flotillas
				button = {
					name = "flotillas_button"
					size = { 90 28 }
					onclick = "[InformationPanelBar.OpenPanelTab('military', 'navy')]"

					flowcontainer = {
						name = "Flotillas"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
						using = tooltip_below
						margin_left = 3
	
						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = flotillas_icon
							texture = "gfx/interface/icons/generic_icons/flotillas.dds"
							parentanchor = vcenter
						}
	
						textbox = {
							parentanchor = vcenter
							text = "#variable [Country.GetWarships|0]#!"
							alpha = "[TransparentIfZero_int32(Country.GetWarships)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = 2
						}
					}
				}

				# Battalions
				button = {
					name = "battalions_button"
					size = { 90 28 }
					onclick = "[InformationPanelBar.OpenPanelTab('military', 'army')]"

					flowcontainer = {
						name = "battalions"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = battalions_icon
							texture = "gfx/interface/icons/generic_icons/battalions.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[Country.GetBattalions|v]+[Country.CalcConscriptableBattalions|v]"
							alpha = "[TransparentIfZero_int32(Country.GetBattalions)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = -1
						}
					}
				}

				flowcontainer = {
					using = zz_colonization_colonial_capacity
				}
			}
			###VICTORIA UNIVERSALIS
			flowcontainer = {
				name = "victoria_universalis_topbar"
				visible = "[Not(GetScriptedGui('ve_top_bar').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
				layoutpolicy_vertical = expanding
				#using = hide_ve_mod_topbar
				alwaystransparent = no
				# position = { 130 40 }
				block "animation" {
					position = { 0 0 }
					alpha = 0
					
					state = {
						name = show_topbar_secondary_stats
						alpha = 1
						position_y = 31
						duration = 0.15
						using = Animation_Curve_Default
					}
					state = {
						name = hide_topbar_secondary_stats
						alpha = 0
						position_y = 0
						duration = 0.15
						using = Animation_Curve_Default
					}
				}
				background = {
					using = dark_area_rounded
					margin = { 0 -5 }
					margin_left = 5
				}
				#Missionary
				flowcontainer = {
						visible = "[GetScriptedGui('ve_hide_missionary_topbar').IsShown(GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 5
						tooltip = "ve_missionary_tt"
						using = tooltip_below
						onclick = "[GetVariableSystem.SetOrToggle('ve_tab_var', GetVariableSystem.Get('ve_last_tab'))]"
						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/icon_envoy_missionary.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "missionary_topbar"
							default_format = "#tooltip_header"
							autoresize = yes
							align = left|nobaseline
						}
				}
						
				#Cultural Missionary
				flowcontainer = {
						visible = "[GetScriptedGui('ve_hide_culture_missionary_topbar').IsShown(GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 5
						using = tooltip_below
						tooltip = "ve_cultural_missionary_tt"
						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/icon2_diffusionist.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "cultural_missionary_topbar"
							default_format = "#tooltip_header"
							autoresize = yes
							align = left|nobaseline
						}
				}

				#Idea Point
				flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						using = tooltip_below
						margin_left = 3
						tooltip = "[GetPlayer.GetCustom('idea_points_cus_loc')]"
						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/icon_ideas.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "idea_point_topbar"
							default_format = "#tooltip_header"
							autoresize = yes
							align = left|nobaseline
							margin_left = 2
						}
				}

				#Piety
				flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						datacontext = "[Country.GetGovernmentLegitimacyLevel]"
						using = tooltip_below
						tooltip = "ve_piety_tt"

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/catholic.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "piety_topbar"
							default_format = "#tooltip_header"
							autoresize = yes
							align = left|nobaseline
						}
				}

				#Cultural Reform
				flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						using = tooltip_below
						visible = "[GetScriptedGui('hide_reform_point').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						tooltip = "ve_culture_reform_point_tt"

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/monarch_cultures_icon.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "cultural_reform_topbar"
							default_format = "#tooltip_header"
							autoresize = yes
							align = left|nobaseline
						}
				}			
				

				#Splendor
				flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						using = tooltip_below
						tooltip = "ve_age_splendor_tt"

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/icon_splendor_tiny.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "splendor_topbar"
							default_format = "#tooltip_header"
							autoresize = yes
							align = left|nobaseline
							margin_left = -1
						}
				}
			}

			
		}
	}

	type topbar = widget {
		widget = {
			name = "topbar"
			using = hud_visibility
			datacontext = "[AccessMetaPlayer.AccessPlayedOrObservedCountry]"
			using = clickthrough_blocker
			size = { 725 100 }
			allow_outside = yes
			resizeparent = yes
			
			#alpha = 0
			#position = { 0 -100 }

			#state = {
			#	name = _show
			#	using = default_show_properties
			#	#position_y = 0
			#	
			#	on_start = "[PdxGuiTriggerAllAnimations('hud_shiny_effect_show')]"
			#}
			#state = {
			#	name = _hide
			#	using = default_hide_properties
			#	#position_y = -100
			#}
			
			using = default_fade_in_out
			
			onmousehierarchyenter = "[PdxGuiInterruptThenTriggerAllAnimations('hide_topbar_secondary_stats','show_topbar_secondary_stats')]"
			onmousehierarchyleave = "[PdxGuiInterruptThenTriggerAllAnimations('show_topbar_secondary_stats','hide_topbar_secondary_stats')]"

			widget = {
				### background
				#this is also used to trigger notifications maximize/minimize
				#when you open/close any fullscreen (did not know where else to put it)
				widget = {
					using = fullscreen_hide
					size = { 100% 100% }
					
					state = {
						name = _show
						alpha = 1
						duration = 0
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('notifications_minimize','notifications_maximize')]"
					}
					state = {
						name = _hide
						alpha = 0
						duration = 0.2
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('notifications_maximize','notifications_minimize')]"
					}
					
					background = {
						texture = "gfx/interface/main_hud/topbar_bg.dds"
						shaderfile = "gfx/FX/pdxgui_default.shader"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						spriteborder_bottom = 94
						spriteborder_right = 100
						texture_density = 2
						using = hud_elements_alpha
						
						modify_texture = {
							texture = "gfx/interface/backgrounds/default_bg_shading.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = overlay
							alpha = 0.5
						}
						modify_texture = {
							using = texture_velvet
						}
						modify_texture = {
							using = fancy_pattern
						}
					}
					icon = {
						texture = "gfx/interface/main_hud/topbar_side_dec.dds"
						size = { 100% 100% }
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						spriteborder_bottom = 94
						spriteborder_right = 110
						texture_density = 2
						
						using = hud_shiny_effect
					}
				}
				
				flowcontainer = {
					margin_right = 35
					margin_bottom = 7
					resizeparent = yes
					
					container = {
						### PRIMARY ICONS
						flowcontainer = {
							position = { 130 -1 }

							block "spacing" {
								spacing = 12
							}
							margin_bottom = 5
							
							flowcontainer = {
								# TODO Mikael / Aron: surely there is a better way to do this
								name = "tutorial_highlight_all_capacities"
								block "spacing" {
									spacing = 12
								}
								
								### BUREAUCRACY
								button = {
									name = "tutorial_highlight_bureaucracy"
									using = glow_button
									size = { 100 40 }
									tooltip = "BUREAUCRACY_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'institutions')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
							
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = bureaucracy_icon
										texture = "gfx/interface/icons/topbar/bureaucracy_icon.dds"
										parentanchor = vcenter
									}
									
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('bureaucracy')|D=+]#!"
										align = center|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('bureaucracy')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('bureaucracy'))]"
										}
									}			
								}
							
								### AUTHORITY
								button = {
									name = "tutorial_highlight_authority"
									using = glow_button
									size = { 100 40 }
									tooltip = "AUTHORITY_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
							
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = authority_icon
										texture = "gfx/interface/icons/topbar/authority_icon.dds"
										parentanchor = vcenter
									}
								
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('authority')|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('authority')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('authority'))]"
										}
									}				
								}
							
								### INFLUENCE
								button = {
									name = "tutorial_highlight_influence"
									using = glow_button
									size = { 100 40 }
									tooltip = "INFLUENCE_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('diplomatic_overview', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
									
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = dip_power_icon
										texture = "gfx/interface/icons/topbar/influence_icon.dds"
										parentanchor = vcenter
									}
									
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('influence')|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('influence')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('influence'))]"
										}
									}
								}
							}

						##### EXTRA INFO #####
						### RESEARCH
						container = {
							name = "research"
							layoutpolicy_vertical = expanding
							
							button = {
								using = glow_button					
								size = { 100 40 }
								tooltip = "SULIUS_RESEARCH"
								using = tooltip_below
								onclick = "[InformationPanelBar.OpenPanelCycleTabs('tech_tree', 'production|military|society')]"
							
								icon = {
									size = { 36 36 }
									name = research_icon
									texture = "gfx/interface/icons/generic_icons/innovation.dds"
									parentanchor = vcenter
								}
							
								textbox = {
									position = { 35 -2 }
									name = capital_value
									text = "[Country.GetWeeklyInnovation|+]" #"[AccessPlayer.GetCurrentlyResearchedTechnology.GetProgressPercentage(GetPlayer.Self)]"
									align = left|nobaseline
									using = fontsize_large
									autoresize = yes
									parentanchor = vcenter
								}

								widget = {
									size = { 60 12 }
									position = { 40 0 }
									parentanchor = bottom
									visible = "[AccessPlayer.GetCurrentlyResearchedTechnology.IsValid]" # Only Visible if researching
									default_progressbar_horizontal = {
										parentanchor = vcenter
										name = "tech_progressbar"
										size = { 60 6 }
										blockoverride "values" {
											max = "[FixedPointToFloat(AccessPlayer.GetCurrentlyResearchedTechnology.GetCost(GetPlayer.Self))]"
											value = "[FixedPointToFloat(AccessPlayer.GetCurrentlyResearchedTechnology.GetProgress(GetPlayer.Self))]"
										}
									}
								}

								widget = {
									size = { 60 12 }
									position = { 40 0 }
									parentanchor = bottom
									visible = "[Not(AccessPlayer.GetCurrentlyResearchedTechnology.IsValid)]" # Only Visible if not researching
									default_progressbar_horizontal = {
										parentanchor = vcenter
										name = "tech_progressbar"
										size = { 60 6 }
										blockoverride "values" {
											value = 0
										}
									}
								}
							}
							}
							
							### MONEY
							container = {
								name = "tutorial_highlight_treasury"
								layoutpolicy_vertical = expanding
								
								button = {
									using = glow_button					
									size = { 100 40 }
									tooltip = "CAPITAL_MONEY"
									using = tooltip_below
									using = money_tooltip_with_graph
									onclick = "[InformationPanelBar.OpenPanelTab('budget', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
								
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = income_power_icon
										texture = "gfx/interface/icons/topbar/income_power_icon.dds"
										parentanchor = vcenter
									}
								
									textbox = {
										position = { 35 -3 }
										name = capital_value
										text = "[AccessPlayer.PredictWeeklyBalanceWithEconomyHealthHint]"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
										visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.GetCreditRatio, '(CFixedPoint)0' )]"

										bad_progressbar_horizontal = {
											parentanchor = vcenter
											name = "credit_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetCreditRatio)]"
												min = 0  
												max = 1
											}
										}
									}
									
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
										visible = "[GreaterThan_CFixedPoint( GetPlayer.GetGoldReserveRatio, '(CFixedPoint)0' )]"
									
										gold_progressbar_horizontal = {
											parentanchor = vcenter
											name = "gold_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetGoldReserveRatio )]"
												min = 0  
												max = 1
											}
										}
									}
								}
							}
						
						}
						
						#shows only on hover
						topbar_secondary_icons = {
							visible = "[GetVariableSystem.Exists('more_topbar_info')]"
						}
						
						#locked
						topbar_secondary_icons = {
							visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"
							
							blockoverride "animation" {
								position = { 0 44 }
							}
						}
					}
				}
			}
			
			### LOCK TOGGLE FOR SECONDARY ROW OF ICONS
			button_icon_round_toggle = {
				visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
				size = { 24 24 }
				parentanchor = bottom|right
				position = { -30 -9 }
				
				alpha = 0
				
				state = {
					name = show_topbar_secondary_stats
					delay = 0.15
					alpha = 1
					duration = 0.15
					using = Animation_Curve_Default
				}
				state = {
					name = hide_topbar_secondary_stats
					alpha = 0
					duration = 0
					using = Animation_Curve_Default
				}
				
				blockoverride "on_click" {
					onclick = "[GetVariableSystem.Toggle('more_topbar_info')]"
				}
				blockoverride "view_1" {
					visible = "[GetVariableSystem.Exists('more_topbar_info')]"
				}
				blockoverride "view_2" {
					visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"
				}
				blockoverride "icon_1" {
					texture = "gfx/interface/buttons/button_icons/unlock.dds"
				}
				blockoverride "icon_2" {
					texture = "gfx/interface/buttons/button_icons/lock.dds"
				}
				blockoverride "tooltip_1" {
					tooltip = "LOCK_TOPBAR"
				}
				blockoverride "tooltip_2" {
					tooltip = "UNLOCK_TOPBAR"
				}
			}
			
			### FLAG
			fancy_flag = {
				blockoverride "rank_badge_block" {} # Show rank badge seperately from flag with topbar_rank

				observer_mode_overlay = {
					blockoverride "observer_properties" {
						position = { -1 -105 }
					}

					blockoverride "icon_size" {
						size = { 25 25 }
					}

					blockoverride "fontsize" {
						using = fontsize_medium
						maximumsize = { 100 -1 }
					}
				}
			}
		}
	}

	type topbar_rank = button {
		name = "topbar_rank"
		using = hud_visibility
		datacontext = "[GetPlayer]"
		using = clickthrough_blocker
		size = { 57 57 }
		position = { -4 78 }
		
		onclick = "[MapListPanelManager.ToggleCurrentPanel]"
		onclick = "[SelectMapModeByKey('mm_default')]"

		### RANK
		rank_badge = {
			size = { 57 57 }
		}
	}
}
